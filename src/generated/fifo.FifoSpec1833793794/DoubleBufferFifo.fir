;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit DoubleBufferFifo : 
  module DoubleBuffer : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[fifo.scala 79:27]
    reg dataReg : UInt<16>, clock @[fifo.scala 80:22]
    reg shadowReg : UInt<16>, clock @[fifo.scala 81:24]
    node _T = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.enq.valid : @[fifo.scala 85:29]
        stateReg <= UInt<2>("h01") @[fifo.scala 86:20]
        dataReg <= io.enq.bits @[fifo.scala 87:19]
        skip @[fifo.scala 85:29]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(io.enq.valid, UInt<1>("h00")) @[fifo.scala 91:31]
        node _T_3 = and(io.deq.ready, _T_2) @[fifo.scala 91:28]
        when _T_3 : @[fifo.scala 91:46]
          stateReg <= UInt<2>("h00") @[fifo.scala 92:20]
          skip @[fifo.scala 91:46]
        node _T_4 = and(io.deq.ready, io.enq.valid) @[fifo.scala 94:28]
        when _T_4 : @[fifo.scala 94:45]
          stateReg <= UInt<2>("h01") @[fifo.scala 95:20]
          dataReg <= io.enq.bits @[fifo.scala 96:19]
          skip @[fifo.scala 94:45]
        node _T_5 = eq(io.deq.ready, UInt<1>("h00")) @[fifo.scala 98:15]
        node _T_6 = and(_T_5, io.enq.valid) @[fifo.scala 98:29]
        when _T_6 : @[fifo.scala 98:46]
          stateReg <= UInt<2>("h02") @[fifo.scala 99:20]
          shadowReg <= io.enq.bits @[fifo.scala 100:21]
          skip @[fifo.scala 98:46]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          when io.deq.ready : @[fifo.scala 104:29]
            dataReg <= shadowReg @[fifo.scala 105:19]
            stateReg <= UInt<2>("h01") @[fifo.scala 106:20]
            skip @[fifo.scala 104:29]
          skip @[Conditional.scala 39:67]
    node _T_8 = eq(stateReg, UInt<2>("h00")) @[fifo.scala 112:31]
    node _T_9 = eq(stateReg, UInt<2>("h01")) @[fifo.scala 112:53]
    node _T_10 = or(_T_8, _T_9) @[fifo.scala 112:41]
    io.enq.ready <= _T_10 @[fifo.scala 112:18]
    node _T_11 = eq(stateReg, UInt<2>("h01")) @[fifo.scala 113:31]
    node _T_12 = eq(stateReg, UInt<2>("h02")) @[fifo.scala 113:51]
    node _T_13 = or(_T_11, _T_12) @[fifo.scala 113:39]
    io.deq.valid <= _T_13 @[fifo.scala 113:18]
    io.deq.bits <= dataReg @[fifo.scala 114:17]
    
  module DoubleBuffer_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[fifo.scala 79:27]
    reg dataReg : UInt<16>, clock @[fifo.scala 80:22]
    reg shadowReg : UInt<16>, clock @[fifo.scala 81:24]
    node _T = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.enq.valid : @[fifo.scala 85:29]
        stateReg <= UInt<2>("h01") @[fifo.scala 86:20]
        dataReg <= io.enq.bits @[fifo.scala 87:19]
        skip @[fifo.scala 85:29]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(io.enq.valid, UInt<1>("h00")) @[fifo.scala 91:31]
        node _T_3 = and(io.deq.ready, _T_2) @[fifo.scala 91:28]
        when _T_3 : @[fifo.scala 91:46]
          stateReg <= UInt<2>("h00") @[fifo.scala 92:20]
          skip @[fifo.scala 91:46]
        node _T_4 = and(io.deq.ready, io.enq.valid) @[fifo.scala 94:28]
        when _T_4 : @[fifo.scala 94:45]
          stateReg <= UInt<2>("h01") @[fifo.scala 95:20]
          dataReg <= io.enq.bits @[fifo.scala 96:19]
          skip @[fifo.scala 94:45]
        node _T_5 = eq(io.deq.ready, UInt<1>("h00")) @[fifo.scala 98:15]
        node _T_6 = and(_T_5, io.enq.valid) @[fifo.scala 98:29]
        when _T_6 : @[fifo.scala 98:46]
          stateReg <= UInt<2>("h02") @[fifo.scala 99:20]
          shadowReg <= io.enq.bits @[fifo.scala 100:21]
          skip @[fifo.scala 98:46]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          when io.deq.ready : @[fifo.scala 104:29]
            dataReg <= shadowReg @[fifo.scala 105:19]
            stateReg <= UInt<2>("h01") @[fifo.scala 106:20]
            skip @[fifo.scala 104:29]
          skip @[Conditional.scala 39:67]
    node _T_8 = eq(stateReg, UInt<2>("h00")) @[fifo.scala 112:31]
    node _T_9 = eq(stateReg, UInt<2>("h01")) @[fifo.scala 112:53]
    node _T_10 = or(_T_8, _T_9) @[fifo.scala 112:41]
    io.enq.ready <= _T_10 @[fifo.scala 112:18]
    node _T_11 = eq(stateReg, UInt<2>("h01")) @[fifo.scala 113:31]
    node _T_12 = eq(stateReg, UInt<2>("h02")) @[fifo.scala 113:51]
    node _T_13 = or(_T_11, _T_12) @[fifo.scala 113:39]
    io.deq.valid <= _T_13 @[fifo.scala 113:18]
    io.deq.bits <= dataReg @[fifo.scala 114:17]
    
  module DoubleBufferFifo : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>}}
    
    inst DoubleBuffer of DoubleBuffer @[fifo.scala 117:57]
    DoubleBuffer.clock <= clock
    DoubleBuffer.reset <= reset
    inst DoubleBuffer_1 of DoubleBuffer_1 @[fifo.scala 117:57]
    DoubleBuffer_1.clock <= clock
    DoubleBuffer_1.reset <= reset
    DoubleBuffer_1.io.enq.bits <= DoubleBuffer.io.deq.bits @[fifo.scala 120:27]
    DoubleBuffer_1.io.enq.valid <= DoubleBuffer.io.deq.valid @[fifo.scala 120:27]
    DoubleBuffer.io.deq.ready <= DoubleBuffer_1.io.enq.ready @[fifo.scala 120:27]
    DoubleBuffer.io.enq.bits <= io.enq.bits @[fifo.scala 122:10]
    DoubleBuffer.io.enq.valid <= io.enq.valid @[fifo.scala 122:10]
    io.enq.ready <= DoubleBuffer.io.enq.ready @[fifo.scala 122:10]
    io.deq.bits <= DoubleBuffer_1.io.deq.bits @[fifo.scala 123:10]
    io.deq.valid <= DoubleBuffer_1.io.deq.valid @[fifo.scala 123:10]
    DoubleBuffer_1.io.deq.ready <= io.deq.ready @[fifo.scala 123:10]
    
