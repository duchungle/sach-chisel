;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit BundleVec : 
  module BundleVec : 
    input clock : Clock
    input reset : UInt<1>
    output io : {chan : {data : UInt<32>, valid : UInt<1>}, chan2 : {data : UInt<32>, valid : UInt<1>}, flip idx : UInt<4>, array : UInt<4>, flip dIn : UInt<32>, dOut : UInt<32>, bvOut : UInt<8>, chreg : {data : UInt<32>, valid : UInt<1>}}
    
    wire ch : {data : UInt<32>, valid : UInt<1>} @[BundleVec.scala 23:16]
    ch.data <= UInt<7>("h07b") @[BundleVec.scala 24:11]
    ch.valid <= UInt<1>("h01") @[BundleVec.scala 25:12]
    wire v : UInt<4>[3] @[BundleVec.scala 35:15]
    v[0] <= UInt<1>("h01") @[BundleVec.scala 39:8]
    v[1] <= UInt<2>("h03") @[BundleVec.scala 40:8]
    v[2] <= UInt<3>("h05") @[BundleVec.scala 41:8]
    node _T = bits(io.idx, 1, 0)
    io.array <= v[_T] @[BundleVec.scala 47:12]
    io.chan.valid <= ch.valid @[BundleVec.scala 48:11]
    io.chan.data <= ch.data @[BundleVec.scala 48:11]
    reg registerFile : UInt<32>[32], clock @[BundleVec.scala 51:25]
    registerFile[UInt<2>("h01")] <= io.dIn @[BundleVec.scala 57:21]
    io.dOut <= registerFile[UInt<2>("h01")] @[BundleVec.scala 61:11]
    wire vecBundle : {data : UInt<32>, valid : UInt<1>}[8] @[BundleVec.scala 64:23]
    vecBundle[0].valid <= ch.valid @[BundleVec.scala 68:18]
    vecBundle[0].data <= ch.data @[BundleVec.scala 68:18]
    vecBundle[1].valid <= ch.valid @[BundleVec.scala 68:18]
    vecBundle[1].data <= ch.data @[BundleVec.scala 68:18]
    vecBundle[2].valid <= ch.valid @[BundleVec.scala 68:18]
    vecBundle[2].data <= ch.data @[BundleVec.scala 68:18]
    vecBundle[3].valid <= ch.valid @[BundleVec.scala 68:18]
    vecBundle[3].data <= ch.data @[BundleVec.scala 68:18]
    vecBundle[4].valid <= ch.valid @[BundleVec.scala 68:18]
    vecBundle[4].data <= ch.data @[BundleVec.scala 68:18]
    vecBundle[5].valid <= ch.valid @[BundleVec.scala 68:18]
    vecBundle[5].data <= ch.data @[BundleVec.scala 68:18]
    vecBundle[6].valid <= ch.valid @[BundleVec.scala 68:18]
    vecBundle[6].data <= ch.data @[BundleVec.scala 68:18]
    vecBundle[7].valid <= ch.valid @[BundleVec.scala 68:18]
    vecBundle[7].data <= ch.data @[BundleVec.scala 68:18]
    io.chan2.valid <= vecBundle[1].valid @[BundleVec.scala 70:12]
    io.chan2.data <= vecBundle[1].data @[BundleVec.scala 70:12]
    wire bv : {field : UInt<8>, vector : UInt<8>[4]} @[BundleVec.scala 79:16]
    bv.field <= UInt<4>("h0d") @[BundleVec.scala 80:12]
    bv.vector[0] <= UInt<2>("h03") @[BundleVec.scala 82:18]
    bv.vector[1] <= UInt<2>("h03") @[BundleVec.scala 82:18]
    bv.vector[2] <= UInt<2>("h03") @[BundleVec.scala 82:18]
    bv.vector[3] <= UInt<2>("h03") @[BundleVec.scala 82:18]
    io.bvOut <= bv.field @[BundleVec.scala 85:12]
    wire initVal : {data : UInt<32>, valid : UInt<1>} @[BundleVec.scala 88:21]
    initVal.data <= UInt<1>("h00") @[BundleVec.scala 90:16]
    initVal.valid <= UInt<1>("h00") @[BundleVec.scala 91:17]
    reg channelReg : {data : UInt<32>, valid : UInt<1>}, clock with : (reset => (reset, initVal)) @[BundleVec.scala 93:27]
    channelReg.data <= UInt<1>("h01") @[BundleVec.scala 96:19]
    channelReg.valid <= UInt<1>("h01") @[BundleVec.scala 97:20]
    io.chreg.valid <= channelReg.valid @[BundleVec.scala 99:12]
    io.chreg.data <= channelReg.data @[BundleVec.scala 99:12]
    
